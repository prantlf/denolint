name: CI

env:
  DEBUG: 'napi:*'
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  NODE_OPTIONS: '--max-old-space-size=3072'
  CARGO_UNSTABLE_TARGET_APPLIES_TO_HOST: true
  CARGO_TARGET_APPLIES_TO_HOST: false

on:
  push:
    branches:
      - master
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '.*'
      - '.github/workflows/lint.yml'
  pull_request:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              cargo build --release
              strip -x target/release/*.dylib
              strip target/release/denolint
              pnpm -r run copy:target

          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              cargo build --release
              pnpm -r run copy:target

          - host: windows-latest
            target: i686-pc-windows-msvc
            build: |
              cargo build --release --target i686-pc-windows-msvc
              pnpm -r run copy:target i686-pc-windows-msvc

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              cargo build --release
              strip target/release/*.so target/release/denolint
              pnpm -r run copy:target

          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-arm-linux-gnueabihf
            build: |
              cargo build --release --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip target/armv7-unknown-linux-gnueabihf/release/*.so target/armv7-unknown-linux-gnueabihf/release/denolint
              pnpm -r run copy:target armv7-unknown-linux-gnueabihf

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              cargo build --release
              strip target/release/*.so target/release/denolint
              pnpm -r run copy:target

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
            build: |
              cargo build --release --target aarch64-unknown-linux-gnu
              aarch64-linux-gnu-strip target/aarch64-unknown-linux-gnu/release/*.so target/aarch64-unknown-linux-gnu/release/denolint
              pnpm -r run copy:target aarch64-unknown-linux-gnu

          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              cargo build --release --target aarch64-apple-darwin
              strip -x target/aarch64-apple-darwin/release/*.dylib
              strip target/aarch64-apple-darwin/release/denolint
              pnpm -r run copy:target aarch64-apple-darwin

          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: |
          #     rustup target add aarch64-unknown-linux-musl
          #     cargo build --release --target aarch64-unknown-linux-musl
          #     /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip target/release/*.so target/release/denolint
          #     pnpm -r run copy:target
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          #   build: |
          #     sudo apt-get update
          #     sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu
          #     sudo dpkg --add-architecture arm64
          #     sudo apt update
          #     sudo apt install -y --no-install-recommends musl:arm64
          #     rustup target add aarch64-unknown-linux-musl
          #     cargo build --release --target aarch64-unknown-linux-musl
          #     aarch64-linux-musl-strip target/aarch64-unknown-linux-musl/release/*.so target/aarch64-unknown-linux-musl/release/denolint
          #     pnpm -r run copy:target aarch64-unknown-linux-musl

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              cargo build --release --target aarch64-pc-windows-msvc
              pnpm -r run copy:target aarch64-pc-windows-msvc

    name: build-${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '7'

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: ${{ matrix.settings.target }}

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ matrix.settings.target }}-cargo-

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ matrix.settings.target }}-npm-16-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash

      - name: Install NPM dependencies
        run: pnpm i --frozen-lockfile --no-verify-store-integrity

      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: List packages
        run: ls -R packages
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.settings.target }}
          path: |
            packages/*/*.node
            packages/denolint/denolint*
          if-no-files-found: error

  build-freebsd:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    name: build-x86_64-unknown-freebsd
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v3
      - name: Build
        id: build
        uses: vmactions/freebsd-vm@v0.2.3
        env:
          DEBUG: 'napi:*'
          RUSTUP_HOME: /usr/local/rustup
          CARGO_HOME: /usr/local/cargo
          RUSTUP_IO_THREADS: 1
        with:
          envs: 'DEBUG RUSTUP_HOME CARGO_HOME RUSTUP_IO_THREADS'
          usesh: true
          mem: 3000
          prepare: |
            pkg install -y curl node16
            curl -qL https://www.npmjs.com/install.sh | sh
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
          run: |
            echo "Install NPM dependencies"
            npm i
            cd packages/libdenolint
            npm un libdenolint
            npm i
            cd ../..
            echo "Build Rust artifacts"
            . /usr/local/cargo/env
            cargo build --release
            strip -x target/release/*.so
            strip target/release/denolint
            echo "Distribute Rust artifacts"
            cd packages/denolint
            node scripts/copy-target.js
            cd ../..
            cd packages/libdenolint
            node scripts/copy-target.js
            cd ../..
            echo "Test"
            cd packages/denolint
            ./denolint -p ../../crates/shared/test/pass && ./denolint -p ../../crates/shared/test/warn || ./denolint -p ../../crates/shared/test/fail || ./denolint -h && ./denolint -V
            cd ../..
            cd packages/libdenolint
            node test/index.cjs
            node test/index.mjs
            cd ../..
            echo "Clean up"
            rm -rf node_modules
            cd packages/libdenolint
            rm -rf node_modules
            cd ../..
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-freebsd
          path: |
            packages/*/*.node
            packages/denolint/denolint*
          if-no-files-found: error

  test:
    needs:
      - build

    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          # - host: windows-latest
          #   target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          # - host: macos-latest
          #   target: aarch64-apple-darwin
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
        node:
          - '14'
          - '16'
          - '18'

    name: test-${{ matrix.settings.target }}-node@${{ matrix.node }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '7'

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ matrix.settings.target }}-npm-${{ matrix.node }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash

      - name: Install NPM dependencies
        run: pnpm i --frozen-lockfile --no-verify-store-integrity

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.settings.target }}
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts
        shell: bash

      - name: Move artifacts
        run: pnpm -r run move:artifact
        shell: bash

      - name: List packages
        run: ls -R packages
        shell: bash

      - name: Test
        run: pnpm -r test

      - name: Test on Windows
        if: "contains(matrix.settings.target, 'windows')"
        run: pnpm -r test:win32

      - name: Test on others
        if: "!contains(matrix.settings.target, 'windows')"
        run: pnpm -r test:other

  publish:
    if: "startsWith(github.event.head_commit.message, 'chore(release): publish')"

    needs:
      - test
      - build-freebsd

    name: publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '7'

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: x86_64-unknown-linux-gnu-npm-16-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install NPM dependencies
        run: pnpm i --frozen-lockfile --no-verify-store-integrity

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish common
        run: |
          find ./packages/ -type d -maxdepth 1 -exec cp LICENSE {} \;
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          pnpm -r publish --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: PNPM publish both native
        if: "startsWith(github.event.head_commit.message, 'chore(release): publish both')"
        run: ./scripts/publish-native.sh both
        shell: bash

      - name: PNPM publish native denolint
        if: "startsWith(github.event.head_commit.message, 'chore(release): publish denolint')"
        run: ./scripts/publish-native.sh denolint
        shell: bash

      - name: PNPM publish native libdenolint
        if: "startsWith(github.event.head_commit.message, 'chore(release): publish libdenolint')"
        run: ./scripts/publish-native.sh libdenolint
        shell: bash
